name: Veracode AutoPackager + Pipeline Scan + SARIF

on:
  push:
    branches: [ main ]
  pull_request:

permissions:
  contents: read
  security-events: write

jobs:
  veracode:
    runs-on: ubuntu-latest
    steps:
      - name: 🏁 Checkout
        uses: actions/checkout@v4

      # 0) (Opcional) Build da sua app aqui
      # - name: Build
      #   run: ./gradlew build  # mvn package / npm run build / dotnet publish ...

      # 1) Instalar Veracode CLI
      - name: 📦 Instalar Veracode CLI
        run: |
          curl -fsS https://tools.veracode.com/veracode-cli/install | sh
          ./veracode --version

      # 2) Auto Packager (detecta stack e empacota)
      - name: 📁 Auto Packager (gera zip)
        id: pack
        env:
          # se quiser usar API key/secret só na etapa de upload/scan, dá pra pular configure aqui
          VERACODE_API_ID: ${{ secrets.VID }}
          VERACODE_API_KEY: ${{ secrets.VKEY }}
        run: |
          set -euo pipefail
          out_dir="veracode-out"
          mkdir -p "$out_dir"

          # Pacote auto (VAS/auto-detect). Ajuste o --source se precisar.
          ./veracode package --source . --output "$out_dir" --trust

          # Pega o primeiro zip gerado e renomeia para analysisPack.zip
          zip_file=$(find "$out_dir" -maxdepth 1 -type f -name '*.zip' | head -n1)
          if [ -z "${zip_file:-}" ]; then
            echo "Nenhum .zip gerado pelo Auto Packager." >&2
            exit 1
          fi

          final_zip="$GITHUB_WORKSPACE/analysisPack.zip"
          mv -f "$zip_file" "$final_zip"
          echo "✅ Pacote final: $final_zip"

          # expõe o caminho para os próximos passos
          echo "artifact=$final_zip" >> "$GITHUB_OUTPUT"

      # 3) Pipeline Scan (gera JSON). Usa o caminho do zip renomeado acima
      - name: 🔍 Veracode Pipeline Scan (JSON)
        uses: veracode/Veracode-pipeline-scan-action@v1.0.18
        with:
          vid: ${{ secrets.VID }}
          vkey: ${{ secrets.VKEY }}
          file: ${{ steps.pack.outputs.artifact }}
          # request_policy: 'Very High'   # opcional
          additional_arguments: "-jo true"  # gera results.json

      # 4) Converter JSON -> SARIF
      - name: 🔄 Converter resultados para SARIF
        uses: veracode/veracode-pipeline-scan-results-to-sarif@v2.0.3
        with:
          scan-type: "pipeline"
          results-json: "results.json"
          output-file: "veracode-results.sarif"

      # 5) Upload SARIF para Code Scanning
      - name: ☁️ Upload SARIF
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: veracode-results.sarif
