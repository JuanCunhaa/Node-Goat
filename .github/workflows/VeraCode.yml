name: Afrika Universal Veracode CI/CD

on:
  push:
    branches: [ main ]
  pull_request:

jobs:
  detect:
    runs-on: ubuntu-latest
    outputs:
      stack: ${{ steps.detect.outputs.stack }}
      path: ${{ steps.detect.outputs.path }}
    steps:
      - uses: actions/checkout@v4
      - name: Detect Stack
        id: detect
        run: chmod +x .github/Afrika/scripts/detect-stack.sh && .github/Afrika/scripts/detect-stack.sh

  docker:
    runs-on: ubuntu-latest
    needs: detect
    steps:
      - uses: actions/checkout@v4
      - name: Build Afrika Universal Image
        run: docker build -t afrika-universal -f .github/Afrika/Dockerfile .

  build-linux:
    runs-on: ubuntu-latest
    needs: [detect, docker]
    if: |
      contains(needs.detect.outputs.stack, 'java') ||
      contains(needs.detect.outputs.stack, 'scala') ||
      contains(needs.detect.outputs.stack, 'kotlin') ||
      contains(needs.detect.outputs.stack, 'node') ||
      contains(needs.detect.outputs.stack, 'python') ||
      contains(needs.detect.outputs.stack, 'go') ||
      contains(needs.detect.outputs.stack, 'php') ||
      contains(needs.detect.outputs.stack, 'ruby') ||
      contains(needs.detect.outputs.stack, 'perl') ||
      contains(needs.detect.outputs.stack, 'cpp') ||
      contains(needs.detect.outputs.stack, 'coldfusion') ||
      contains(needs.detect.outputs.stack, 'cobol') ||
      contains(needs.detect.outputs.stack, 'abap')
    steps:
      - uses: actions/checkout@v4
      - name: Run Build Universal Inside Container
        run: |
          docker run --rm \
            -v ${{ github.workspace }}:/repo \
            -w /repo \
            afrika-universal \
            bash -c "chmod +x .github/Afrika/scripts/build-universal.sh && .github/Afrika/scripts/build-universal.sh '${{ needs.detect.outputs.stack }}' '${{ needs.detect.outputs.path }}'"

  build-mac:
    runs-on: macos-latest
    needs: detect
    if: |
      contains(needs.detect.outputs.stack, 'swift') ||
      contains(needs.detect.outputs.stack, 'obj-c') ||
      contains(needs.detect.outputs.stack, 'dart')
    steps:
      - uses: actions/checkout@v4
      - name: Build on macOS
        run: echo "⚙️ Compilar Swift/iOS/Dart → Xcodebuild ou Flutter aqui"

  build-windows:
    runs-on: windows-latest
    needs: detect
    if: |
      contains(needs.detect.outputs.stack, 'classic-asp')
    steps:
      - uses: actions/checkout@v4
      - name: Build on Windows
        run: echo "⚙️ Build Classic ASP ou .NET Framework com MSBuild/NuGet"

  veracode:
    runs-on: ubuntu-latest
    needs: [build-linux, build-mac, build-windows]
    steps:
      - uses: actions/checkout@v4

      - name: Veracode SCA (SourceClear)
        env:
          SRCCLR_API_TOKEN: ${{ secrets.SCA }}
        run: |
          curl -sSL 'https://download.sourceclear.com/ci.sh' | bash -s -- scan

      - name: Veracode Pipeline Scan
        uses: veracode/Veracode-pipeline-scan-action@0.3.3
        with:
          vid: ${{ secrets.VID }}
          vkey: ${{ secrets.VKEY }}
          file: '**/*.zip'
          fail_build: true

      - name: Veracode Upload And Scan
        uses: veracode/veracode-uploadandscan-action@0.2.8
        with:
          appname: 'AfrikaUniversalApp'
          filepath: '**/*.zip'
          vid: ${{ secrets.VID }}
          vkey: ${{ secrets.VKEY }}
