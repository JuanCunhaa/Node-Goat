name: Veracode Ultra Workflow (Auto-Packager + Manual Linux/macOS + Workspace)

on:
  push:
    branches: [ main ]
  pull_request:

jobs:

  # 🔹 Veracode SCA (SourceClear)
  sca:
    name: Veracode SCA (SourceClear)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4.1.2

      - name: Run Veracode SCA
        env:
          SRCCLR_API_TOKEN: ${{ secrets.SCA }}
        run: |
          curl -sSL 'https://download.sourceclear.com/ci.sh' | bash -s -- scan

  # 🔹 Detect Stack + Version
  detect_stack:
    name: Detect Project Stack + Version
    runs-on: ubuntu-latest
    outputs:
      language: ${{ steps.detect.outputs.language }}
      build_path: ${{ steps.detect.outputs.build_path }}
      node_version: ${{ steps.detect.outputs.node_version }}
      python_version: ${{ steps.detect.outputs.python_version }}
      go_version: ${{ steps.detect.outputs.go_version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4.1.2

      - id: detect
        name: Detect Language, Path & Versions
        run: |
          lang="unsupported"
          build_path="${GITHUB_WORKSPACE}"
          node_version=""
          python_version=""
          go_version=""

          echo "🔍 Detecting language and version..."

          cd "${GITHUB_WORKSPACE}"

          if find . -name "pom.xml" | grep -q .; then
            lang="maven"
          elif find . -name "build.gradle" | grep -q .; then
            lang="gradle"
          elif find . -name "build.gradle.kts" | grep -q .; then
            lang="kotlin"
          elif find . -name "AndroidManifest.xml" | grep -q .; then
            lang="android"
          elif find . -name "package.json" | grep -q .; then
            if grep -q "react-native" package.json; then
              lang="react_native"
            else
              lang="node"
            fi
            if [ -f .nvmrc ]; then
              node_version=$(cat .nvmrc)
            else
              node_version=$(node -p "require('./package.json').engines?.node || '20'")
            fi
          elif find . -name "pyproject.toml" | grep -q . || find . -name "setup.py" | grep -q .; then
            lang="python"
            python_version=$(grep -m1 'python =' pyproject.toml | sed 's/.*"\(.*\)"/\1/') || python_version="3.10"
          elif find . -name "go.mod" | grep -q .; then
            lang="go"
            go_version=$(grep '^go ' go.mod | awk '{print $2}') || go_version="1.21"
          elif find . -name "*.sln" | grep -q . || find . -name "*.csproj" | grep -q .; then
            lang="dotnet_framework"
          elif find . -name "Makefile" | grep -q . || find . -name "CMakeLists.txt" | grep -q .; then
            lang="cpp"
          elif find . -name "build.xml" | grep -q .; then
            lang="ant"
          elif find . -name "composer.json" | grep -q .; then
            lang="php"
          elif find . -name "Gemfile" | grep -q .; then
            lang="ruby"
          elif find . -name "Podfile" | grep -q . || [ -d "ios" ]; then
            lang="ios"
          elif find . -name "pubspec.yaml" | grep -q .; then
            lang="flutter"
          fi

          echo "✅ Language: $lang"
          echo "📂 Build Path: $build_path"
          echo "🟢 Node: $node_version"
          echo "🟢 Python: $python_version"
          echo "🟢 Go: $go_version"

          if [ "$lang" = "unsupported" ]; then
            echo "❌ Unsupported language!"
            exit 1
          fi

          echo "language=$lang" >> $GITHUB_OUTPUT
          echo "build_path=$build_path" >> $GITHUB_OUTPUT
          echo "node_version=$node_version" >> $GITHUB_OUTPUT
          echo "python_version=$python_version" >> $GITHUB_OUTPUT
          echo "go_version=$go_version" >> $GITHUB_OUTPUT

  # 🔹 Auto-Packager (CLI)
  build_auto:
    name: Veracode CLI Auto-Packager
    runs-on: ubuntu-latest
    needs: detect_stack
    if: |
      needs.detect_stack.outputs.language == 'maven' ||
      needs.detect_stack.outputs.language == 'gradle' ||
      needs.detect_stack.outputs.language == 'kotlin' ||
      needs.detect_stack.outputs.language == 'android' ||
      needs.detect_stack.outputs.language == 'node' ||
      needs.detect_stack.outputs.language == 'react_native' ||
      needs.detect_stack.outputs.language == 'python' ||
      needs.detect_stack.outputs.language == 'go'
    steps:
      - name: Checkout
        uses: actions/checkout@v4.1.2

      - name: Setup Node
        if: |
          needs.detect_stack.outputs.language == 'node' ||
          needs.detect_stack.outputs.language == 'react_native'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ needs.detect_stack.outputs.node_version }}

      - name: Setup Python
        if: needs.detect_stack.outputs.language == 'python'
        uses: actions/setup-python@v5
        with:
          python-version: ${{ needs.detect_stack.outputs.python_version }}

      - name: Setup Go
        if: needs.detect_stack.outputs.language == 'go'
        uses: actions/setup-go@v5
        with:
          go-version: ${{ needs.detect_stack.outputs.go_version }}

      - name: Install Veracode CLI & Auto-Package
        run: |
          mkdir -p "${GITHUB_WORKSPACE}/veracode-out"
          curl -sSfL https://tools.veracode.com/veracode-cli/install | sh
          ./veracode package --source "${GITHUB_WORKSPACE}" --output "${GITHUB_WORKSPACE}/veracode-out/veracode-auto.zip" --trust

      - name: Upload Auto-Packager Artifact
        uses: actions/upload-artifact@v4
        with:
          name: veracode-package
          path: "${GITHUB_WORKSPACE}/veracode-out/veracode-auto.zip"

  # 🔹 Manual Build Linux (Fallback)
  build_manual:
    name: Build Manual (Linux Fallback)
    runs-on: ubuntu-latest
    needs: detect_stack
    if: |
      needs.detect_stack.outputs.language == 'cpp' ||
      needs.detect_stack.outputs.language == 'ant' ||
      needs.detect_stack.outputs.language == 'php' ||
      needs.detect_stack.outputs.language == 'ruby' ||
      needs.detect_stack.outputs.language == 'flutter'
    steps:
      - name: Checkout
        uses: actions/checkout@v4.1.2

      - name: Setup Flutter
        if: needs.detect_stack.outputs.language == 'flutter'
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.x'

      - name: Manual Build
        run: |
          mkdir -p "${GITHUB_WORKSPACE}/veracode-out/output"
          cd "${GITHUB_WORKSPACE}"
          lang="${{ needs.detect_stack.outputs.language }}"

          if [ "$lang" = "cpp" ]; then
            make || cmake . && make && cp -r ./ "${GITHUB_WORKSPACE}/veracode-out/output/"
          elif [ "$lang" = "ant" ]; then
            ant build && cp -r build/* "${GITHUB_WORKSPACE}/veracode-out/output/"
          elif [ "$lang" = "php" ]; then
            composer install || true && rsync -av ./ "${GITHUB_WORKSPACE}/veracode-out/output" --exclude vendor --exclude .git
          elif [ "$lang" = "ruby" ]; then
            bundle install || true && rsync -av ./ "${GITHUB_WORKSPACE}/veracode-out/output" --exclude .git
          elif [ "$lang" = "flutter" ]; then
            flutter pub get && flutter build apk --debug
            cp build/app/outputs/flutter-apk/*.apk "${GITHUB_WORKSPACE}/veracode-out/output/"
          fi

      - name: Package Manual Build
        run: |
          cd "${GITHUB_WORKSPACE}/veracode-out"
          zip -r veracode-manual.zip output

      - name: Upload Manual Artifact
        uses: actions/upload-artifact@v4
        with:
          name: veracode-package
          path: "${GITHUB_WORKSPACE}/veracode-out/veracode-manual.zip"

  # 🔹 Manual Build macOS (iOS Fallback)
  build_manual_mac:
    name: Build Manual (macOS Fallback)
    runs-on: macos-latest
    needs: detect_stack
    if: needs.detect_stack.outputs.language == 'ios'
    steps:
      - name: Checkout
        uses: actions/checkout@v4.1.2

      - run: |
          mkdir -p "${GITHUB_WORKSPACE}/veracode-out/output"
          rsync -av ./ "${GITHUB_WORKSPACE}/veracode-out/output" --exclude .git

      - name: Package macOS Output
        run: |
          cd "${GITHUB_WORKSPACE}/veracode-out"
          zip -r veracode-ios.zip output

      - name: Upload macOS Artifact
        uses: actions/upload-artifact@v4
        with:
          name: veracode-package
          path: "${GITHUB_WORKSPACE}/veracode-out/veracode-ios.zip"

  # 🔹 Veracode Pipeline Scan
  pipeline_scan:
    name: Veracode Pipeline Scan
    runs-on: ubuntu-latest
    needs: [build_auto, build_manual, build_manual_mac]
    if: always()
    steps:
      - name: Download Artifact
        uses: actions/download-artifact@v4
        with:
          name: veracode-package
          path: "${GITHUB_WORKSPACE}/veracode-out"

      - name: Run Veracode Pipeline Scan
        uses: veracode/Veracode-pipeline-scan-action@v1.0.18
        with:
          vid: ${{ secrets.VID }}
          vkey: ${{ secrets.VKEY }}
          file: "${GITHUB_WORKSPACE}/veracode-out/*.zip"
          fail_build: true

  # 🔹 Veracode Upload & Scan
  sast:
    name: Veracode Upload & Scan
    runs-on: ubuntu-latest
    needs: [build_auto, build_manual, build_manual_mac]
    if: always()
    steps:
      - name: Download Artifact
        uses: actions/download-artifact@v4
        with:
          name: veracode-package
          path: "${GITHUB_WORKSPACE}/veracode-out"

      - name: Veracode Upload & Scan
        uses: veracode/veracode-uploadandscan-action@0.2.8
        with:
          vid: ${{ secrets.VID }}
          vkey: ${{ secrets.VKEY }}
          appname: 'GitHub - ${{ github.repository }}'
          createprofile: true
          filepath: "${GITHUB_WORKSPACE}/veracode-out/*.zip"
          version: ${{ github.run_id }}
