name: Veracode Ultra Workflow (Robust Final)

on:
  push:
    branches: [ main ]
  pull_request:

jobs:
  # -------------------------------
  # 🔹 Job 1: SCA - SEMPRE LINUX
  # -------------------------------
  sca:
    name: Veracode SCA (SourceClear)
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Run Veracode SCA (curl)
        env:
          SRCCLR_API_TOKEN: ${{ secrets.SCA }}
        run: |
          curl -sSL 'https://download.sourceclear.com/ci.sh' | bash -s -- scan

  # -------------------------------
  # 🔹 Job 2: Detect Stack
  # -------------------------------
  detect_stack:
    name: Detect Stack
    runs-on: ubuntu-latest
    outputs:
      language: ${{ steps.detect.outputs.language }}

    steps:
      - uses: actions/checkout@v4

      - id: detect
        run: |
          echo "🔍 Detectando stack..."
          lang="unknown"

          if [ -f "pom.xml" ]; then
            lang="maven"
          elif [ -f "build.gradle" ]; then
            lang="gradle"
          elif [ -f "build.xml" ]; then
            lang="ant"
          elif ls *.sln 1> /dev/null 2>&1 || ls *.csproj 1> /dev/null 2>&1; then
            if grep -q "netcoreapp" *.csproj; then
              lang="dotnet_core"
            else
              lang="dotnet_framework"
            fi
          elif [ -f "package.json" ]; then
            lang="node"
          elif [ -f "pyproject.toml" ] || [ -f "setup.py" ]; then
            lang="python"
          elif [ -f "composer.json" ]; then
            lang="php"
          elif [ -f "Gemfile" ]; then
            lang="ruby"
          elif [ -f "go.mod" ]; then
            lang="go"
          elif [ -f "Cargo.toml" ]; then
            lang="rust"
          elif [ -f "Makefile" ] || [ -f "CMakeLists.txt" ]; then
            lang="cpp"
          elif [ -f "AndroidManifest.xml" ]; then
            lang="android"
          elif [ -f "Podfile" ] || [ -d "ios" ]; then
            lang="ios"
          else
            lang="fallback"
          fi

          echo "language=$lang" >> $GITHUB_OUTPUT
          echo "➡️ Linguagem detectada: $lang"

  # -------------------------------
  # 🔹 Job 3: Build - Linux stacks
  # -------------------------------
  build_linux:
    name: Build - Linux Stacks
    runs-on: ubuntu-latest
    needs: detect_stack
    if: |
      needs.detect_stack.outputs.language != 'dotnet_framework' &&
      needs.detect_stack.outputs.language != 'ios'

    outputs:
      artifact_path: ${{ steps.set_output.outputs.artifact_path }}

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'

      - id: build
        run: |
          echo "🔨 Buildando Linux..."
          mkdir -p output
          lang="${{ needs.detect_stack.outputs.language }}"

          if [ "$lang" = "maven" ]; then
            mvn clean package
            cp -r target/* output/
          elif [ "$lang" = "gradle" ]; then
            gradle build
            cp -r build/libs/* output/
          elif [ "$lang" = "ant" ]; then
            ant debug || ant release || ant build
            cp -r build/* output/
          elif [ "$lang" = "dotnet_core" ]; then
            dotnet restore
            dotnet build --configuration Release
            cp -r bin/* output/
          elif [ "$lang" = "node" ]; then
            npm install
            npm run build || echo "Nenhum build script"
            rsync -av --progress ./ ./output --exclude output --exclude node_modules
          elif [ "$lang" = "python" ]; then
            pip install .
            cp -r * output/
          elif [ "$lang" = "php" ]; then
            composer install || true
            cp -r * output/
          elif [ "$lang" = "ruby" ]; then
            bundle install || true
            cp -r * output/
          elif [ "$lang" = "go" ]; then
            go build -o app
            cp app output/
          elif [ "$lang" = "rust" ]; then
            cargo build --release
            cp -r target/release/* output/
          elif [ "$lang" = "cpp" ]; then
            if [ -f "Makefile" ]; then
              make
            else
              mkdir build && cd build && cmake .. && make
              cd ..
            fi
            cp -r * output/
          elif [ "$lang" = "android" ]; then
            ./gradlew assembleDebug
            cp app/build/outputs/apk/debug/*.apk output/
          elif [ "$lang" = "fallback" ]; then
            echo "⚠️ Fallback → copiando tudo"
            rsync -av --progress ./ ./output --exclude output
          fi

      - id: set_output
        run: echo "artifact_path=output" >> $GITHUB_OUTPUT

      - name: Package Artifact
        run: zip -r veracode.zip output

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: veracode-package
          path: veracode.zip

  # -------------------------------
  # 🔹 Job 4: Build - Windows (.NET Framework)
  # -------------------------------
  build_windows:
    name: Build - Windows (.NET Framework)
    runs-on: windows-latest
    needs: detect_stack
    if: needs.detect_stack.outputs.language == 'dotnet_framework'

    outputs:
      artifact_path: ${{ steps.set_output.outputs.artifact_path }}

    steps:
      - uses: actions/checkout@v4

      - name: Build .NET Framework
        shell: pwsh
        run: |
          $msbuildPath = & "C:\Program Files (x86)\Microsoft Visual Studio\Installer\vswhere.exe" `
            -latest `
            -products * `
            -requires Microsoft.Component.MSBuild `
            -find MSBuild\**\Bin\MSBuild.exe

          Write-Host "MSBuild Path: $msbuildPath"

          $solution = Get-ChildItem -Recurse -Filter *.sln | Select-Object -First 1

          if ($null -eq $solution) {
            $csproj = Get-ChildItem -Recurse -Filter *.csproj | Select-Object -First 1
            if ($null -eq $csproj) {
              Write-Error "❌ Nenhum arquivo .sln ou .csproj encontrado!"
              exit 1
            }
            & "$msbuildPath" $csproj.FullName /p:Configuration=Release
          } else {
            & "$msbuildPath" $solution.FullName /p:Configuration=Release
          }

          mkdir output

          $binFolders = Get-ChildItem -Recurse -Directory -Filter bin
          if ($binFolders) {
            foreach ($folder in $binFolders) {
              Copy-Item -Path "$($folder.FullName)\*" -Destination .\output -Recurse
            }
          } else {
            Write-Host "⚠️ Nenhum diretório bin encontrado."
          }

      - id: set_output
        run: echo "artifact_path=output" >> $Env:GITHUB_OUTPUT

      - name: Package Artifact
        run: Compress-Archive -Path output -DestinationPath veracode.zip

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: veracode-package
          path: veracode.zip

  # -------------------------------
  # 🔹 Job 5: Build Mac (iOS/Swift)
  # -------------------------------
  build_mac:
    name: Build - macOS (iOS/Swift)
    runs-on: macos-latest
    needs: detect_stack
    if: needs.detect_stack.outputs.language == 'ios'

    outputs:
      artifact_path: ${{ steps.set_output.outputs.artifact_path }}

    steps:
      - uses: actions/checkout@v4

      - name: Build iOS/Swift
        run: |
          echo "⚠️ Compile seu Xcode build aqui!"
          mkdir output && cp -r * output/

      - id: set_output
        run: echo "artifact_path=output" >> $GITHUB_OUTPUT

      - name: Package Artifact
        run: zip -r veracode.zip output

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: veracode-package
          path: veracode.zip

  # -------------------------------
  # 🔹 Job 6: Pipeline Scan
  # -------------------------------
  pipeline_scan:
    name: Veracode Pipeline Scan
    runs-on: ubuntu-latest
    needs: [build_linux, build_windows, build_mac]
    if: |
      always() &&
      (needs.build_linux.result == 'success' || needs.build_windows.result == 'success' || needs.build_mac.result == 'success')

    steps:
      - name: Download Artifact
        uses: actions/download-artifact@v4
        with:
          name: veracode-package

      - name: Run Pipeline Scan
        run: |
          curl -sSO https://downloads.veracode.com/securityscan/pipeline-scan-LATEST.zip
          unzip pipeline-scan-LATEST.zip
          java -jar pipeline-scan.jar \
            -vid ${{ secrets.VID }} \
            -vkey ${{ secrets.VKEY }} \
            -f veracode.zip \
            -jf results.json

  # -------------------------------
  # 🔹 Job 7: SAST
  # -------------------------------
  sast:
    name: Veracode Upload and Scan (SAST)
    runs-on: ubuntu-latest
    needs: [build_linux, build_windows, build_mac]
    if: |
      always() &&
      (needs.build_linux.result == 'success' || needs.build_windows.result == 'success' || needs.build_mac.result == 'success')

    steps:
      - name: Download Artifact
        uses: actions/download-artifact@v4
        with:
          name: veracode-package

      - name: Upload and Scan
        uses: veracode/veracode-uploadandscan-action@master
        with:
          vid: ${{ secrets.VID }}
          vkey: ${{ secrets.VKEY }}
          appname: 'Github - ${{ github.repository }}'
          createprofile: true
          filepath: 'veracode.zip'
          version: ${{ github.run_id }}
          deleteIncompleteScan: false
