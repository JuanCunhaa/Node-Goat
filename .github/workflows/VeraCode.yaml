name: Veracode Ultra Workflow (SCA + Detect & Build ‚Üí Pipeline + SAST)

on:
  push:
    branches: [ main ]
  pull_request:

jobs:
  # -----------------------------------
  # üîπ JOB 1: Veracode SCA (Isolado)
  # -----------------------------------
  sca:
    name: Veracode SCA (SourceClear)
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Run Veracode SCA (via curl)
        env:
          SRCCLR_API_TOKEN: ${{ secrets.SCA }}
        run: |
          curl -sSL 'https://download.sourceclear.com/ci.sh' | bash -s -- scan

  # -----------------------------------
  # üîπ JOB 2: Detect, Build & Package
  # -----------------------------------
  detect_build_package:
    name: Detect, Build and Package
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'

      - name: Detect language and build
        id: build
        shell: bash
        run: |
          echo "üîç Detectando linguagem e build real..."

          if [ -f "pom.xml" ]; then
            echo "‚û°Ô∏è Java Maven detectado"
            if grep -q "<artifactId>" pom.xml; then
              mvn clean package || echo "‚ö†Ô∏è Maven falhou"
            else
              echo "‚ö†Ô∏è pom.xml sem artifactId, fallback"
            fi
            mkdir -p output && cp -r src/ output/ || true
            echo "artifact_path=target/*.jar output" >> $GITHUB_OUTPUT

          elif [ -f "build.gradle" ]; then
            echo "‚û°Ô∏è Java Gradle detectado"
            if grep -q "com.android.application" build.gradle; then
              echo "‚û°Ô∏è Android (Gradle) detectado"
              ./gradlew assembleDebug || echo "‚ö†Ô∏è Gradle assemble falhou"
              echo "artifact_path=app/build/outputs/apk/debug/*.apk" >> $GITHUB_OUTPUT
            else
              gradle build || echo "‚ö†Ô∏è Gradle build falhou"
              mkdir -p output && cp -r src/ output/ || true
              echo "artifact_path=build/libs/*.jar output" >> $GITHUB_OUTPUT
            fi

          elif [ -f "build.xml" ]; then
            echo "‚û°Ô∏è Java Ant detectado"
            ant debug || ant release || ant build || echo "‚ö†Ô∏è Ant falhou"
            mkdir -p output && cp -r src/ output/ || true
            echo "artifact_path=output" >> $GITHUB_OUTPUT

          elif ls *.sln 1> /dev/null 2>&1 || ls *.csproj 1> /dev/null 2>&1; then
            echo "‚û°Ô∏è .NET detectado"
            dotnet restore || echo "‚ö†Ô∏è dotnet restore falhou"
            dotnet build --configuration Release || echo "‚ö†Ô∏è dotnet build falhou"
            mkdir -p output && cp -r bin/ output/ || true
            echo "artifact_path=$(find . -type f -name '*.dll') output" >> $GITHUB_OUTPUT

          elif [ -f "package.json" ]; then
            echo "‚û°Ô∏è Node.js / TypeScript detectado"
            npm install -g npm@latest || true
            npm install || true

            if grep -q "\"build\":" package.json; then
              echo "üì¶ Script build detectado: npm run build"
              npm run build || echo "‚ö†Ô∏è npm run build falhou"
            else
              echo "üì¶ Nenhum script build no package.json"
            fi

            mkdir -p output && rsync -av --progress ./ ./output --exclude output --exclude node_modules
            echo "artifact_path=output" >> $GITHUB_OUTPUT

          elif [ -f "pyproject.toml" ]; then
            echo "‚û°Ô∏è Python detectado (pyproject.toml)"
            if grep -q "\[build-system\]" pyproject.toml; then
              echo "üì¶ build-system detectado, pip install"
              pip install . || echo "‚ö†Ô∏è pip install falhou"
            else
              echo "üì¶ Sem build-system, fallback"
            fi
            mkdir -p output && rsync -av --progress ./ ./output --exclude output
            echo "artifact_path=output" >> $GITHUB_OUTPUT

          elif [ -f "setup.py" ]; then
            echo "‚û°Ô∏è Python detectado (setup.py)"
            python setup.py build || echo "‚ö†Ô∏è setup.py build falhou"
            mkdir -p output && rsync -av --progress ./ ./output --exclude output
            echo "artifact_path=output" >> $GITHUB_OUTPUT

          elif [ -f "composer.json" ]; then
            echo "‚û°Ô∏è PHP detectado"
            if grep -q "\"scripts\":" composer.json; then
              echo "üì¶ composer.json tem scripts, mas build geralmente manual"
            fi
            mkdir -p output && rsync -av --progress ./ ./output --exclude output --exclude vendor
            echo "artifact_path=output" >> $GITHUB_OUTPUT

          elif [ -f "Gemfile" ]; then
            echo "‚û°Ô∏è Ruby detectado"
            bundle install || echo "‚ö†Ô∏è bundle install falhou"
            mkdir -p output && rsync -av --progress ./ ./output --exclude output --exclude vendor
            echo "artifact_path=output" >> $GITHUB_OUTPUT

          elif [ -f "go.mod" ]; then
            echo "‚û°Ô∏è Go detectado"
            go mod tidy || echo "‚ö†Ô∏è go mod tidy falhou"
            go build -o app-binary || echo "‚ö†Ô∏è go build falhou"
            mkdir -p output && cp -r * output/
            echo "artifact_path=output" >> $GITHUB_OUTPUT

          elif [ -f "Cargo.toml" ]; then
            echo "‚û°Ô∏è Rust detectado"
            cargo build --release || echo "‚ö†Ô∏è cargo build falhou"
            mkdir -p output && cp -r src/ output/ || true
            echo "artifact_path=output" >> $GITHUB_OUTPUT

          elif [ -f "Makefile" ]; then
            echo "‚û°Ô∏è C/C++ detectado com Makefile"
            make || echo "‚ö†Ô∏è make falhou"
            mkdir -p output && cp -r src/ output/ || true
            echo "artifact_path=output" >> $GITHUB_OUTPUT

          elif [ -f "CMakeLists.txt" ]; then
            echo "‚û°Ô∏è C/C++ detectado com CMake"
            mkdir -p build && cd build && cmake .. && make || echo "‚ö†Ô∏è cmake/make falhou"
            mkdir -p output && cp -r ../src/ output/ || true
            echo "artifact_path=output" >> $GITHUB_OUTPUT

          elif [ -f "AndroidManifest.xml" ]; then
            echo "‚û°Ô∏è Android detectado (Ant/Eclipse)"
            ant debug || ant release || echo "‚ö†Ô∏è Ant falhou"
            mkdir -p output && rsync -av --progress ./ ./output --exclude output
            echo "artifact_path=output" >> $GITHUB_OUTPUT

          elif ls *.pl 1> /dev/null 2>&1; then
            echo "‚û°Ô∏è Perl detectado"
            mkdir -p output && rsync -av --progress ./ ./output --exclude output
            echo "artifact_path=output" >> $GITHUB_OUTPUT

          elif ls *.asp 1> /dev/null 2>&1; then
            echo "‚û°Ô∏è Classic ASP detectado"
            mkdir -p output && rsync -av --progress ./ ./output --exclude output
            echo "artifact_path=output" >> $GITHUB_OUTPUT

          elif ls *.ps1 1> /dev/null 2>&1; then
            echo "‚û°Ô∏è PowerShell detectado"
            mkdir -p output && rsync -av --progress ./ ./output --exclude output
            echo "artifact_path=output" >> $GITHUB_OUTPUT

          elif ls *.cfm 1> /dev/null 2>&1; then
            echo "‚û°Ô∏è ColdFusion detectado"
            mkdir -p output && rsync -av --progress ./ ./output --exclude output
            echo "artifact_path=output" >> $GITHUB_OUTPUT

          elif [ -f "Podfile" ] || [ -d "ios" ]; then
            echo "‚û°Ô∏è Swift/iOS detectado"
            echo "‚ö†Ô∏è ‚ö†Ô∏è N√£o suportado em Linux. Use runner macOS."
            exit 1

          else
            echo "‚ö†Ô∏è Nenhuma stack detectada formalmente. Fallback geral!"
            mkdir -p output && rsync -av --progress ./ ./output --exclude output
            echo "artifact_path=output" >> $GITHUB_OUTPUT
          fi

      - name: Package build output
        run: |
          echo "üì¶ Empacotando..."
          zip -r veracode.zip ${{ steps.build.outputs.artifact_path }}

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: veracode-package
          path: veracode.zip

  # -----------------------------------
  # üîπ JOB 3: Pipeline Scan
  # -----------------------------------
  pipeline_scan:
    name: Veracode Pipeline Scan (CLI)
    runs-on: ubuntu-latest
    needs: detect_build_package

    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: veracode-package

      - name: Run Pipeline Scan
        run: |
          curl -sSO https://downloads.veracode.com/securityscan/pipeline-scan-LATEST.zip
          unzip pipeline-scan-LATEST.zip
          java -jar pipeline-scan.jar \
            -vid ${{ secrets.VID }} \
            -vkey ${{ secrets.VKEY }} \
            -f veracode.zip \
            -jf results.json

      - name: Convert results to SARIF
        run: |
          jq '{runs:[{tool:{driver:{name:"Veracode Pipeline Scan"}}, results:.findings}]}' results.json > results.sarif

      - name: Upload SARIF to GitHub
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: results.sarif

  # -----------------------------------
  # üîπ JOB 4: SAST Upload & Scan
  # -----------------------------------
  sast:
    name: Veracode Upload and Scan (SAST)
    runs-on: ubuntu-latest
    needs: detect_build_package

    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: veracode-package

      - name: Upload and Scan with Veracode Action
        uses: veracode/veracode-uploadandscan-action@master
        with:
          vid: ${{ secrets.VID }}
          vkey: ${{ secrets.VKEY }}
          appname: 'Github - ${{ github.repository }}'
          createprofile: true
          filepath: 'veracode.zip'
          version: ${{ github.run_id }}
          deleteIncompleteScan: false
