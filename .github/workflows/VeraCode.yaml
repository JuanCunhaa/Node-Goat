name: Veracode Ultra Workflow (Full Builds + SARIF)

on:
  push:
    branches: [ main ]
  pull_request:

permissions:
  actions: read
  contents: read
  security-events: write

jobs:

  # -----------------------------
  # 🔹 Veracode SCA
  # -----------------------------
  sca:
    name: 🔍 Veracode SCA (SourceClear)
    runs-on: ubuntu-latest
    steps:
      - name: 🏁 Checkout Repository
        uses: actions/checkout@v4

      - name: 🔬 Run Veracode SCA
        env:
          SRCCLR_API_TOKEN: ${{ secrets.SCA }}
        run: |
          echo "🔍 Running Veracode SCA (SourceClear)..."
          curl -sSL 'https://download.sourceclear.com/ci.sh' | bash -s -- scan

  # -----------------------------
  # 🔹 Detect Stack
  # -----------------------------
  detect_stack:
    name: 🧩 Detect Project Stack
    runs-on: ubuntu-latest
    outputs:
      language: ${{ steps.detect.outputs.language }}
      node_version: ${{ steps.detect.outputs.node_version }}
      python_version: ${{ steps.detect.outputs.python_version }}
      go_version: ${{ steps.detect.outputs.go_version }}
      bundler_version: ${{ steps.detect.outputs.bundler_version }}
    steps:
      - name: 🏁 Checkout Repository
        uses: actions/checkout@v4

      - id: detect
        name: 🔍 Detect Language & Versions
        run: |
          echo "🧩 Detecting project language..."
          lang="unsupported"
          node_version=""
          python_version=""
          go_version=""
          bundler_version=""

          if find . -name "pom.xml" | grep -q .; then lang="maven"
          elif find . -name "build.gradle" | grep -q .; then lang="gradle"
          elif find . -name "build.gradle.kts" | grep -q .; then lang="kotlin"
          elif find . -name "AndroidManifest.xml" | grep -q .; then lang="android"
          elif find . -name "package.json" | grep -q .; then
            if grep -q "react-native" package.json; then lang="react_native"
            else lang="node"; fi
            [ -f .nvmrc ] && node_version=$(cat .nvmrc) || node_version="20"
          elif find . -name "pyproject.toml" | grep -q . || find . -name "setup.py" | grep -q .; then lang="python"; python_version="3.10"
          elif find . -name "go.mod" | grep -q .; then lang="go"; go_version="1.21"
          elif find . -name "*.sln" | grep -q . || find . -name "*.csproj" | grep -q .; then lang="dotnet_framework"
          elif find . -name "Makefile" | grep -q . || find . -name "CMakeLists.txt" | grep -q .; then lang="cpp"
          elif find . -name "build.xml" | grep -q .; then lang="ant"
          elif find . -name "composer.json" | grep -q .; then lang="php"
          elif find . -name "Gemfile" | grep -q .; then
            lang="ruby"
            bundler_version=$(grep -A 1 BUNDLED WITH Gemfile.lock | tail -n1 | tr -d '[:space:]')
          elif find . -name "Podfile" | grep -q . || [ -d "ios" ]; then lang="ios"
          elif find . -name "pubspec.yaml" | grep -q .; then lang="flutter"; fi

          echo "language=$lang" >> $GITHUB_OUTPUT
          echo "node_version=$node_version" >> $GITHUB_OUTPUT
          echo "python_version=$python_version" >> $GITHUB_OUTPUT
          echo "go_version=$go_version" >> $GITHUB_OUTPUT
          echo "bundler_version=$bundler_version" >> $GITHUB_OUTPUT
          echo "✅ Language Detected: $lang, Bundler: $bundler_version"

  # -----------------------------
  # 🔹 Build Auto-Packager
  # -----------------------------
  build_auto:
    name: ⚙️ Build Auto-Packager
    runs-on: ubuntu-latest
    needs: detect_stack
    if: |
      needs.detect_stack.outputs.language != 'cpp' &&
      needs.detect_stack.outputs.language != 'ant' &&
      needs.detect_stack.outputs.language != 'php' &&
      needs.detect_stack.outputs.language != 'ruby' &&
      needs.detect_stack.outputs.language != 'flutter' &&
      needs.detect_stack.outputs.language != 'ios' &&
      needs.detect_stack.outputs.language != 'dotnet_framework'
    outputs:
      artifact: ${{ steps.find.outputs.artifact }}
    steps:
      - name: 🏁 Checkout Repository
        uses: actions/checkout@v4

      - name: ⚙️ Setup Node
        if: needs.detect_stack.outputs.language == 'node' || needs.detect_stack.outputs.language == 'react_native'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ needs.detect_stack.outputs.node_version }}

      - name: ⚙️ Setup Python
        if: needs.detect_stack.outputs.language == 'python'
        uses: actions/setup-python@v5
        with:
          python-version: ${{ needs.detect_stack.outputs.python_version }}

      - name: ⚙️ Setup Go
        if: needs.detect_stack.outputs.language == 'go'
        uses: actions/setup-go@v5
        with:
          go-version: ${{ needs.detect_stack.outputs.go_version }}

      - name: 📦 Run Veracode Auto-Packager
        run: |
          echo "📦 Running Veracode Auto-Packager..."
          mkdir -p veracode-out
          curl -sSfL https://tools.veracode.com/veracode-cli/install | sh
          ./veracode package --source . --output veracode-out --trust

      - id: find
        name: 🔍 Find Auto-Packager Artifact
        run: |
          found=$(find veracode-out -type f \( -name '*.zip' -o -name '*.jar' -o -name '*.war' \) | head -n1)
          echo "artifact=$found" >> $GITHUB_OUTPUT
          echo "✅ Found artifact: $found"

      - name: 📤 Upload Auto-Packager Artifact
        uses: actions/upload-artifact@v4
        with:
          name: veracode-package
          path: ${{ steps.find.outputs.artifact }}

  # -----------------------------
  # 🔹 Build Manual Linux
  # -----------------------------
  build_manual_linux:
    name: 🐧 Build Manual Linux
    runs-on: ubuntu-latest
    needs: detect_stack
    if: |
      needs.detect_stack.outputs.language == 'cpp' ||
      needs.detect_stack.outputs.language == 'ant' ||
      needs.detect_stack.outputs.language == 'php' ||
      needs.detect_stack.outputs.language == 'ruby' ||
      needs.detect_stack.outputs.language == 'flutter'
    outputs:
      artifact: ${{ steps.pack.outputs.artifact }}
    steps:
      - name: 🏁 Checkout Repository
        uses: actions/checkout@v4

      - name: ⚙️ Setup Flutter
        if: needs.detect_stack.outputs.language == 'flutter'
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.x'

      - name: 🔍 Detect Ruby Version & Bundler
        if: needs.detect_stack.outputs.language == 'ruby'
        id: detect_ruby
        run: |
          ruby_version="3.2"
          bundler_version="latest"
          if grep -q '^ruby ' Gemfile; then
            ruby_version=$(grep '^ruby ' Gemfile | awk -F'"' '{print $2}')
          fi
          if [ -f "Gemfile.lock" ]; then
            bundler_version=$(grep -A 1 "BUNDLED WITH" Gemfile.lock | tail -n1 | tr -d '[:space:]')
          fi
          echo "✅ Ruby: $ruby_version  Bundler: $bundler_version"
          echo "ruby_version=$ruby_version" >> $GITHUB_OUTPUT
          echo "bundler_version=$bundler_version" >> $GITHUB_OUTPUT

      - name: ⚙️ Setup Ruby
        if: needs.detect_stack.outputs.language == 'ruby'
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ steps.detect_ruby.outputs.ruby_version }}
          bundler: ${{ steps.detect_ruby.outputs.bundler_version }}
          bundler-cache: true

      - name: ⚙️ Run Manual Linux Build
        id: pack
        run: |
          echo "🐧 Manual Linux Build running..."
          mkdir -p output
          lang="${{ needs.detect_stack.outputs.language }}"

          if [ "$lang" = "cpp" ]; then make; fi
          if [ "$lang" = "ant" ]; then ant build; fi
          if  "$lang" = "php" ]; then composer install; fi
          if [ "$lang" = "ruby" ]; then bundle install[; fi
          if [ "$lang" = "flutter" ]; then flutter pub get && flutter build apk; fi

          echo "📦 Copying project files to output..."
          rsync -av --exclude output --exclude .git ./ output/

          zip -r veracode-manual-linux.zip output

          echo "artifact=veracode-manual-linux.zip" >> $GITHUB_OUTPUT


      - name: 📤 Upload Manual Linux Artifact
        uses: actions/upload-artifact@v4
        with:
          name: veracode-package
          path: ${{ steps.pack.outputs.artifact }}


  # -----------------------------
  # 🔹 Build Manual macOS
  # -----------------------------
  build_manual_mac:
    name: 🍏 Build Manual macOS
    runs-on: macos-latest
    needs: detect_stack
    if: needs.detect_stack.outputs.language == 'ios'
    outputs:
      artifact: ${{ steps.pack.outputs.artifact }}
    steps:
      - name: 🏁 Checkout Repository
        uses: actions/checkout@v4

      - name: ⚙️ Run Manual macOS Build
        id: pack
        run: |
          echo "🍏 Manual macOS Build running..."
          mkdir -p output
          rsync -av ./ ./output --exclude output --exclude .git
          zip -r veracode-manual-mac.zip output
          echo "artifact=veracode-manual-mac.zip" >> $GITHUB_OUTPUT

      - name: 📤 Upload Manual macOS Artifact
        uses: actions/upload-artifact@v4
        with:
          name: veracode-package
          path: ${{ steps.pack.outputs.artifact }}

  # -----------------------------
  # 🔹 Build Manual Windows (.NET Framework)
  # -----------------------------
  build_manual_windows:
    name: 🪟 Build Manual Windows (.NET Framework)
    runs-on: windows-latest
    needs: detect_stack
    if: needs.detect_stack.outputs.language == 'dotnet_framework'
    outputs:
      artifact: ${{ steps.pack.outputs.artifact }}
    steps:
      - name: 🏁 Checkout Repository
        uses: actions/checkout@v4

      - name: ⚙️ Run Manual Windows Build
        id: pack
        shell: powershell
        run: |
          echo "🪟 Manual Windows Build running..."
          mkdir output
          $msbuildPath = & "${Env:ProgramFiles(x86)}\Microsoft Visual Studio\Installer\vswhere.exe" -latest -products * -requires Microsoft.Component.MSBuild -find MSBuild\**\Bin\MSBuild.exe
          echo "MSBuild found at $msbuildPath"
          & "$msbuildPath" /t:Rebuild /p:Configuration=Release
          Compress-Archive -Path * -DestinationPath veracode-manual-windows.zip
          "artifact=veracode-manual-windows.zip" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append

      - name: 📤 Upload Manual Windows Artifact
        uses: actions/upload-artifact@v4
        with:
          name: veracode-package
          path: ${{ steps.pack.outputs.artifact }}

  # -----------------------------
  # 🔹 Pipeline Scan + SARIF
  # -----------------------------
  pipeline_scan:
    name: 🔍 Pipeline Scan + SARIF
    runs-on: ubuntu-latest
    needs: [build_auto, build_manual_linux, build_manual_mac, build_manual_windows]
    if: always()
    steps:
      - name: 📥 Download Artifact
        uses: actions/download-artifact@v4
        with:
          name: veracode-package
          path: ${{ github.workspace }}

      - name: 🔍 Find Final Artifact
        id: find
        run: |
          found=$(find . -type f \( -name '*.zip' -o -name '*.jar' -o -name '*.war' \) | head -n1)
          echo "artifact=$found" >> $GITHUB_OUTPUT
          echo "✅ Using: $found"

      - name: 🧩 Run Pipeline Scan
        uses: veracode/Veracode-pipeline-scan-action@v1.0.18
        with:
          vid: ${{ secrets.VID }}
          vkey: ${{ secrets.VKEY }}
          file: "${{ steps.find.outputs.artifact }}"
          fail_build: false

      - name: 🔗 Convert JSON to SARIF
        run: |
          echo "📝 Converting results to SARIF..."
          jq '{
            version: "2.1.0",
            runs: [
              {
                tool: {
                  driver: {
                    name: "Veracode Pipeline Scan",
                    rules: []
                  }
                },
                results: []
              }
            ]
          }' results.json > veracode-results.sarif

      - name: 📤 Upload SARIF to GitHub
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: veracode-results.sarif

  # -----------------------------
  # 🔹 Veracode Upload & SAST
  # -----------------------------
  sast:
    name: 🔒 Veracode Upload & SAST Scan
    runs-on: ubuntu-latest
    needs: [build_auto, build_manual_linux, build_manual_mac, build_manual_windows]
    if: always()
    steps:
      - name: 📥 Download Artifact
        uses: actions/download-artifact@v4
        with:
          name: veracode-package
          path: ${{ github.workspace }}

      - name: 🔍 Find Final Artifact
        id: find
        run: |
          found=$(find . -type f \( -name '*.zip' -o -name '*.jar' -o -name '*.war' \) | head -n1)
          echo "artifact=$found" >> $GITHUB_OUTPUT
          echo "✅ Using: $found"

      - name: 🔒 Upload & Run SAST Scan
        uses: veracode/veracode-uploadandscan-action@0.2.8
        with:
          vid: ${{ secrets.VID }}
          vkey: ${{ secrets.VKEY }}
          appname: "GitHub - ${{ github.repository }}"
          createprofile: true
          filepath: "${{ steps.find.outputs.artifact }}"
          version: ${{ github.run_id }}
