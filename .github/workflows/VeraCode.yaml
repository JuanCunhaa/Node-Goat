name: Veracode Unified Workflow (Auto Detect)

on:
  push:
    branches: [ main ]
  pull_request:
  workflow_dispatch:

jobs:
  detect_build_package:
    name: Detect Build and Package
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # 1️⃣ Detect e Build
      - name: Detect language and build
        id: build
        run: |
          echo "🕵️ Detectando linguagem..."

          if [ -f "pom.xml" ]; then
            echo "Java Maven detectado"
            mvn clean package
            echo "artifact_path=target/*.jar" >> $GITHUB_OUTPUT

          elif [ -f "build.gradle" ]; then
            echo "Java Gradle detectado"
            gradle build
            echo "artifact_path=build/libs/*.jar" >> $GITHUB_OUTPUT

          elif ls *.sln 1> /dev/null 2>&1; then
            echo ".NET Solution detectado"
            dotnet build --configuration Release
            echo "artifact_path=$(find . -type f -name '*.dll')" >> $GITHUB_OUTPUT

          elif [ -f "package.json" ]; then
            echo "Node.js detectado"
            npm install
            npm run build || echo "Sem script build, ignorando"
            mkdir -p output
            cp -r * output/
            echo "artifact_path=output" >> $GITHUB_OUTPUT

          elif [ -f "requirements.txt" ] || [ -f "pyproject.toml" ]; then
            echo "Python detectado"
            mkdir -p output
            cp -r * output/
            echo "artifact_path=output" >> $GITHUB_OUTPUT

          else
            echo "❌ Nenhuma stack suportada detectada"
            exit 1
          fi

      # 2️⃣ Empacotamento ZIP (se necessário)
      - name: Package build output
        run: |
          echo "📦 Empacotando..."
          zip -r veracode.zip ${{ steps.build.outputs.artifact_path }}

      # 3️⃣ Publica artefato para outros Jobs
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: veracode-package
          path: veracode.zip

  # 🔍 SCA Scan
  sca:
    name: Veracode SCA
    runs-on: ubuntu-latest
    needs: detect_build_package

    steps:
      - uses: actions/checkout@v4

      - name: Veracode SCA
        uses: veracode/veracode-sca@v1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          srcclear_token: ${{ secrets.SCA }}

  # 🗂️ Upload and Scan (SAST)
  sast:
    name: Veracode Upload and Scan
    runs-on: ubuntu-latest
    needs: detect_build_package

    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: veracode-package

      - name: Veracode Upload and Scan
        uses: veracode/veracode-uploadandscan-action@master
        with:
          vid: ${{ secrets.VID }}
          vkey: ${{ secrets.VKEY }}
          appname: 'Github - ${{ github.repository }}'
          createprofile: true
          filepath: 'veracode.zip'
          version: ${{ github.run_id }}
          deleteIncompleteScan: false

  # 🏃 Pipeline Scan
  pipeline_scan:
    name: Veracode Pipeline Scan
    runs-on: ubuntu-latest
    needs: detect_build_package

    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: veracode-package

      - name: Run Veracode Pipeline Scan
        run: |
          curl -sSO https://downloads.veracode.com/securityscan/pipeline-scan-LATEST.zip
          unzip pipeline-scan-LATEST.zip
          java -jar pipeline-scan.jar -vid ${{ secrets.VID }} -vkey ${{ secrets.VKEY }} -f veracode.zip -o results.json

      - name: Convert results to SARIF
        run: |
          jq '{runs:[{tool:{driver:{name:"Veracode Pipeline Scan"}}, results:.findings}]}' results.json > results.sarif

      - name: Upload SARIF to GitHub
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: results.sarif
