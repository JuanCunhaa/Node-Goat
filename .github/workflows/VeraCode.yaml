name: Veracode Ultra Workflow (Detect → SCA → Pipeline → SAST)

on:
  push:
    branches: [ main ]
  pull_request:

jobs:
  detect_build_package:
    name: Detect, Build and Package
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'

      - name: Detect language and build
        id: build
        shell: bash
        run: |
          echo "🔍 Detectando linguagem..."

          if [ -f "pom.xml" ]; then
            echo "➡️ Java Maven detectado"
            mvn clean package
            echo "artifact_path=target/*.jar" >> $GITHUB_OUTPUT

          elif [ -f "build.gradle" ]; then
            echo "➡️ Java Gradle detectado"
            gradle build
            echo "artifact_path=build/libs/*.jar" >> $GITHUB_OUTPUT

          elif ls *.sln 1> /dev/null 2>&1; then
            echo "➡️ .NET detectado"
            dotnet restore
            dotnet build --configuration Release
            echo "artifact_path=$(find . -type f -name '*.dll')" >> $GITHUB_OUTPUT

          elif [ -f "package.json" ]; then
            echo "➡️ Node.js / TypeScript detectado"
            npm install -g npm@latest
            npm install
            npm run build || echo "Sem script build, ignorando"
            mkdir -p output
            rsync -av --progress ./ ./output --exclude output --exclude node_modules
            echo "artifact_path=output" >> $GITHUB_OUTPUT

          elif [ -f "requirements.txt" ] || [ -f "pyproject.toml" ]; then
            echo "➡️ Python detectado"
            mkdir -p output
            rsync -av --progress ./ ./output --exclude output
            echo "artifact_path=output" >> $GITHUB_OUTPUT

          elif [ -f "composer.json" ]; then
            echo "➡️ PHP detectado"
            mkdir -p output
            rsync -av --progress ./ ./output --exclude output --exclude vendor
            echo "artifact_path=output" >> $GITHUB_OUTPUT

          elif [ -f "Gemfile" ]; then
            echo "➡️ Ruby detectado"
            bundle install
            mkdir -p output
            rsync -av --progress ./ ./output --exclude output --exclude vendor
            echo "artifact_path=output" >> $GITHUB_OUTPUT

          elif [ -f "go.mod" ]; then
            echo "➡️ Go detectado"
            go mod tidy
            go build -o app-binary
            mkdir -p output
            mv app-binary output/
            echo "artifact_path=output" >> $GITHUB_OUTPUT

          elif ls *.cpp 1> /dev/null 2>&1 || ls *.c 1> /dev/null 2>&1; then
            echo "➡️ C/C++ detectado"
            mkdir -p build
            gcc *.c -o build/app || g++ *.cpp -o build/app
            echo "artifact_path=build/app" >> $GITHUB_OUTPUT

          elif [ -f "build.gradle" ] && grep -q "com.android.application" build.gradle; then
            echo "➡️ Android detectado"
            ./gradlew assembleDebug
            echo "artifact_path=app/build/outputs/apk/debug/*.apk" >> $GITHUB_OUTPUT

          elif [ -f "Cargo.toml" ]; then
            echo "➡️ Rust detectado"
            cargo build --release
            mkdir -p output
            cp target/release/* output/
            echo "artifact_path=output" >> $GITHUB_OUTPUT

          elif ls *.pl 1> /dev/null 2>&1; then
            echo "➡️ Perl detectado"
            mkdir -p output
            rsync -av --progress ./ ./output --exclude output
            echo "artifact_path=output" >> $GITHUB_OUTPUT

          elif ls *.asp 1> /dev/null 2>&1; then
            echo "➡️ Classic ASP detectado"
            mkdir -p output
            rsync -av --progress ./ ./output --exclude output
            echo "artifact_path=output" >> $GITHUB_OUTPUT

          elif ls *.ps1 1> /dev/null 2>&1; then
            echo "➡️ PowerShell detectado"
            mkdir -p output
            rsync -av --progress ./ ./output --exclude output
            echo "artifact_path=output" >> $GITHUB_OUTPUT

          elif ls *.cfm 1> /dev/null 2>&1; then
            echo "➡️ ColdFusion detectado"
            mkdir -p output
            rsync -av --progress ./ ./output --exclude output
            echo "artifact_path=output" >> $GITHUB_OUTPUT

          else
            echo "❌ Nenhuma stack suportada detectada"
            exit 1
          fi

      - name: Package build output
        run: |
          echo "📦 Empacotando..."
          zip -r veracode.zip ${{ steps.build.outputs.artifact_path }}

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: veracode-package
          path: veracode.zip

  sca:
    name: Veracode SCA (SourceClear)
    runs-on: ubuntu-latest
    needs: detect_build_package

    steps:
      - uses: actions/checkout@v4

      - name: Run Veracode SCA (via curl)
        env:
          SRCCLR_API_TOKEN: ${{ secrets.SCA }}
        run: |
          curl -sSL 'https://download.sourceclear.com/ci.sh' | bash -s -- scan

  pipeline_scan:
    name: Veracode Pipeline Scan (CLI)
    runs-on: ubuntu-latest
    needs: sca

    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: veracode-package

      - name: Run Pipeline Scan
        run: |
          curl -sSO https://downloads.veracode.com/securityscan/pipeline-scan-LATEST.zip
          unzip pipeline-scan-LATEST.zip
          java -jar pipeline-scan.jar \
            -vid ${{ secrets.VID }} \
            -vkey ${{ secrets.VKEY }} \
            -f veracode.zip \
            -jf results.json

      - name: Convert results to SARIF
        run: |
          jq '{runs:[{tool:{driver:{name:"Veracode Pipeline Scan"}}, results:.findings}]}' results.json > results.sarif

      - name: Upload SARIF to GitHub
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: results.sarif

  sast:
    name: Veracode Upload and Scan (SAST)
    runs-on: ubuntu-latest
    needs: pipeline_scan

    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: veracode-package

      - name: Upload and Scan with Veracode Action
        uses: veracode/veracode-uploadandscan-action@master
        with:
          vid: ${{ secrets.VID }}
          vkey: ${{ secrets.VKEY }}
          appname: 'Github - ${{ github.repository }}'
          createprofile: true
          filepath: 'veracode.zip'
          version: ${{ github.run_id }}
          deleteIncompleteScan: false
