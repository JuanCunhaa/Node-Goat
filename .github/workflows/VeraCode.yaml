name: Veracode Ultra Workflow (Full Multi-Runner)

on:
  push:
    branches: [ main ]
  pull_request:

jobs:

  # -----------------------------
  # 🔹 Veracode SCA
  # -----------------------------
  sca:
    name: Veracode SCA (SourceClear)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Run Veracode SCA
        env:
          SRCCLR_API_TOKEN: ${{ secrets.SCA }}
        run: |
          curl -sSL 'https://download.sourceclear.com/ci.sh' | bash -s -- scan

  # -----------------------------
  # 🔹 Detect Stack + Dir
  # -----------------------------
  detect_stack:
    name: Detect Project Stack
    runs-on: ubuntu-latest
    outputs:
      language: ${{ steps.detect.outputs.language }}
      build_dir: ${{ steps.detect.outputs.build_dir }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - id: detect
        name: Detect Language + Dir
        run: |
          lang="unknown"
          build_dir="."

          if path=$(find . -type f -name "pom.xml" | head -n 1); then
            lang="maven"; build_dir=$(dirname "$path")
            echo "✅ Maven Dir: $build_dir"
          elif path=$(find . -type f -name "build.gradle" | head -n 1); then
            lang="gradle"; build_dir=$(dirname "$path")
            echo "✅ Gradle Dir: $build_dir"
          elif path=$(find . -type f -name "build.gradle.kts" | head -n 1) || path=$(find . -type f -name "settings.gradle.kts" | head -n 1); then
            lang="kotlin"; build_dir=$(dirname "$path")
            echo "✅ Kotlin Dir: $build_dir"
          elif path=$(find . -type f -name "build.xml" | head -n 1); then
            lang="ant"; build_dir=$(dirname "$path")
            echo "✅ Ant Dir: $build_dir"
          elif find . -name "*.sln" | grep -q . || find . -name "*.csproj" | grep -q .; then
            if grep -r -q "netcoreapp" ./*.csproj 2>/dev/null; then
              lang="dotnet_core"; build_dir="."
              echo "✅ .NET Core Dir: $build_dir"
            else
              lang="dotnet_framework"; build_dir="."
              echo "✅ .NET Framework Dir: $build_dir"
            fi
          elif path=$(find . -type f -name "package.json" | head -n 1); then
            lang="node"; build_dir=$(dirname "$path")
            echo "✅ Node Dir: $build_dir"
          elif path=$(find . -type f -name "pyproject.toml" | head -n 1) || path=$(find . -type f -name "setup.py" | head -n 1); then
            lang="python"; build_dir=$(dirname "$path")
            echo "✅ Python Dir: $build_dir"
          elif path=$(find . -type f -name "composer.json" | head -n 1); then
            lang="php"; build_dir=$(dirname "$path")
            echo "✅ PHP Dir: $build_dir"
          elif path=$(find . -type f -name "Gemfile" | head -n 1); then
            lang="ruby"; build_dir=$(dirname "$path")
            echo "✅ Ruby Dir: $build_dir"
          elif path=$(find . -type f -name "go.mod" | head -n 1); then
            lang="go"; build_dir=$(dirname "$path")
            echo "✅ Go Dir: $build_dir"
          elif path=$(find . -type f -name "Cargo.toml" | head -n 1); then
            lang="rust"; build_dir=$(dirname "$path")
            echo "✅ Rust Dir: $build_dir"
          elif path=$(find . -type f -name "Makefile" | head -n 1) || path=$(find . -type f -name "CMakeLists.txt" | head -n 1); then
            lang="cpp"; build_dir=$(dirname "$path")
            echo "✅ C++ Dir: $build_dir"
          elif path=$(find . -type f -name "AndroidManifest.xml" | head -n 1); then
            lang="android"; build_dir=$(dirname "$path")
            echo "✅ Android Dir: $build_dir"
          elif path=$(find . -type f -name "pubspec.yaml" | head -n 1); then
            if grep -q "sdk: \">=2.12.0" "$path"; then
              lang="flutter_modern"
            else
              lang="flutter_legacy"
            fi
            build_dir=$(dirname "$path")
            echo "✅ Flutter Dir: $build_dir"
          elif find . -name "Podfile" | grep -q . || [ -d "ios" ]; then
            lang="ios"; build_dir="."
            echo "✅ iOS Dir: $build_dir"
          else
            lang="fallback"; build_dir="."
            echo "⚠️ Fallback Dir: $build_dir"
          fi

          echo "language=$lang" >> $GITHUB_OUTPUT
          echo "build_dir=$build_dir" >> $GITHUB_OUTPUT

  # -----------------------------
  # 🔹 Build Linux
  # -----------------------------
  build_linux:
    name: Build - Linux Stacks
    runs-on: ubuntu-latest
    needs: detect_stack
    if: |
      needs.detect_stack.outputs.language != 'dotnet_framework' &&
      needs.detect_stack.outputs.language != 'ios'
    outputs:
      artifact_path: ${{ steps.set_output.outputs.artifact_path }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Java
        if: |
          needs.detect_stack.outputs.language == 'maven' ||
          needs.detect_stack.outputs.language == 'gradle' ||
          needs.detect_stack.outputs.language == 'kotlin'
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Setup Node
        if: needs.detect_stack.outputs.language == 'node'
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'

      - name: Setup Python
        if: needs.detect_stack.outputs.language == 'python'
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Setup Flutter (Modern)
        if: needs.detect_stack.outputs.language == 'flutter_modern'
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.x'

      - name: Setup Flutter (Legacy)
        if: needs.detect_stack.outputs.language == 'flutter_legacy'
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '2.10.5'

      - id: build
        name: Build Project
        run: |
          lang="${{ needs.detect_stack.outputs.language }}"
          build_dir="${{ needs.detect_stack.outputs.build_dir }}"

          echo "✅ Building: $lang"
          echo "➡️ Dir: $build_dir"

          mkdir -p $GITHUB_WORKSPACE/output
          cd "$build_dir"

          if [ "$lang" = "maven" ]; then
            mvn clean package && cp -r target/* $GITHUB_WORKSPACE/output/
          elif [ "$lang" = "gradle" ] || [ "$lang" = "kotlin" ]; then
            gradle build || ./gradlew build
            cp -r build/libs/* $GITHUB_WORKSPACE/output/
          elif [ "$lang" = "ant" ]; then
            ant debug || ant release || ant build
            cp -r build/* $GITHUB_WORKSPACE/output/
          elif [ "$lang" = "dotnet_core" ]; then
            dotnet restore && dotnet build --configuration Release
            cp -r bin/* $GITHUB_WORKSPACE/output/
          elif [ "$lang" = "node" ]; then
            npm install && npm run build || true
            rsync -av ./ $GITHUB_WORKSPACE/output --exclude output --exclude node_modules --exclude .git
          elif [ "$lang" = "python" ]; then
            sudo apt-get update && sudo apt-get install -y libjpeg-dev zlib1g-dev libpng-dev
            pip install .
            rsync -av ./ $GITHUB_WORKSPACE/output --exclude output --exclude .git
          elif [ "$lang" = "php" ]; then
            composer install || true
            rsync -av ./ $GITHUB_WORKSPACE/output --exclude output --exclude vendor --exclude .git
          elif [ "$lang" = "ruby" ]; then
            bundle install || true
            rsync -av ./ $GITHUB_WORKSPACE/output --exclude output --exclude .git
          elif [ "$lang" = "go" ]; then
            sudo apt-get update && sudo apt-get install -y libcurl4-openssl-dev pkg-config
            go mod tidy && go build -o app
            cp app $GITHUB_WORKSPACE/output/
          elif [ "$lang" = "rust" ]; then
            cargo build --release && cp target/release/* $GITHUB_WORKSPACE/output/
          elif [ "$lang" = "cpp" ]; then
            make || cmake . && make
            rsync -av ./ $GITHUB_WORKSPACE/output --exclude output --exclude .git
          elif [ "$lang" = "android" ]; then
            ./gradlew assembleDebug && cp app/build/outputs/apk/debug/*.apk $GITHUB_WORKSPACE/output/
          elif [[ "$lang" == flutter* ]]; then
            flutter pub get && flutter build apk --debug --split-debug-info=output/
            cp -r build/app/outputs/flutter-apk/*.apk $GITHUB_WORKSPACE/output/
          elif [ "$lang" = "fallback" ]; then
            rsync -av ./ $GITHUB_WORKSPACE/output --exclude output --exclude .git
          fi

      - id: set_output
        run: echo "artifact_path=output" >> $GITHUB_OUTPUT

      - name: Package Artifact
        run: cd $GITHUB_WORKSPACE && zip -r veracode.zip output

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: veracode-package
          path: veracode.zip

  # -----------------------------
  # 🔹 Build Windows (.NET Framework)
  # -----------------------------
  build_windows:
    name: Build - Windows (.NET Framework)
    runs-on: windows-latest
    needs: detect_stack
    if: needs.detect_stack.outputs.language == 'dotnet_framework'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Build .NET Framework
        run: |
          msbuild *.sln /p:Configuration=Release
          mkdir output
          Copy-Item -Path .\bin\* -Destination .\output -Recurse
      - name: Package Artifact
        run: Compress-Archive -Path output -DestinationPath veracode.zip
      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: veracode-package
          path: veracode.zip

  # -----------------------------
  # 🔹 Build macOS (iOS/Swift)
  # -----------------------------
  build_mac:
    name: Build - macOS (iOS/Swift)
    runs-on: macos-latest
    needs: detect_stack
    if: needs.detect_stack.outputs.language == 'ios'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Build iOS/Swift
        run: |
          mkdir -p output
          rsync -av ./ ./output --exclude output --exclude .git
      - name: Package Artifact
        run: zip -r veracode.zip output
      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: veracode-package
          path: veracode.zip

  # -----------------------------
  # 🔹 Veracode Pipeline Scan
  # -----------------------------
  pipeline_scan:
    name: Veracode Pipeline Scan
    runs-on: ubuntu-latest
    needs: [build_linux, build_windows, build_mac]
    if: always() && (needs.build_linux.result == 'success' || needs.build_windows.result == 'success' || needs.build_mac.result == 'success')
    steps:
      - name: Download Artifact
        uses: actions/download-artifact@v4
        with:
          name: veracode-package
      - name: Run Pipeline Scan
        run: |
          curl -sSO https://downloads.veracode.com/securityscan/pipeline-scan-LATEST.zip
          unzip pipeline-scan-LATEST.zip
          java -jar pipeline-scan.jar \
            -vid ${{ secrets.VID }} \
            -vkey ${{ secrets.VKEY }} \
            -f veracode.zip \
            -jf results.json

  # -----------------------------
  # 🔹 Veracode Upload & Scan
  # -----------------------------
  sast:
    name: Veracode Upload & Scan
    runs-on: ubuntu-latest
    needs: [build_linux, build_windows, build_mac]
    if: always() && (needs.build_linux.result == 'success' || needs.build_windows.result == 'success' || needs.build_mac.result == 'success')
    steps:
      - name: Download Artifact
        uses: actions/download-artifact@v4
        with:
          name: veracode-package
      - name: Veracode Upload & Scan
        uses: veracode/veracode-uploadandscan-action@master
        with:
          vid: ${{ secrets.VID }}
          vkey: ${{ secrets.VKEY }}
          appname: 'Github - ${{ github.repository }}'
          createprofile: true
          filepath: 'veracode.zip'
          version: ${{ github.run_id }}
