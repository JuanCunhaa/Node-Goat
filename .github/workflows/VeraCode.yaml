name: Veracode Ultra Workflow (Auto-Packager + Manual Fallback)

on:
  push:
    branches: [ main ]
  pull_request:

jobs:

  # -----------------------------
  # üîπ Veracode SCA (sempre roda)
  # -----------------------------
  sca:
    name: Veracode SCA (SourceClear)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4.1.2
      - name: Run Veracode SCA (via curl)
        env:
          SRCCLR_API_TOKEN: ${{ secrets.SCA }}
        run: |
          curl -sSL 'https://download.sourceclear.com/ci.sh' | bash -s -- scan

  # -----------------------------
  # üîπ Detecta stack + build_path
  # -----------------------------
  detect_stack:
    name: Detect Project Stack
    runs-on: ubuntu-latest
    outputs:
      language: ${{ steps.detect.outputs.language }}
      build_path: ${{ steps.detect.outputs.build_path }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4.1.2

      - id: detect
        name: Detect Language and Path
        run: |
          lang="unknown"
          build_path="."

          if find . -name "pom.xml" | grep -q .; then
            lang="maven"
            build_path=$(dirname "$(find . -name "pom.xml" | head -n1)")
          elif find . -name "build.gradle" | grep -q .; then
            lang="gradle"
            build_path=$(dirname "$(find . -name "build.gradle" | head -n1)")
          elif find . -name "build.gradle.kts" | grep -q .; then
            lang="kotlin"
            build_path=$(dirname "$(find . -name "build.gradle.kts" | head -n1)")
          elif find . -name "AndroidManifest.xml" | grep -q .; then
            lang="android"
            build_path=$(dirname "$(find . -name "AndroidManifest.xml" | head -n1)")
          elif find . -name "package.json" | grep -q .; then
            lang="node"
            build_path=$(dirname "$(find . -name "package.json" | head -n1)")
          elif find . -name "pyproject.toml" | grep -q . || find . -name "setup.py" | grep -q .; then
            lang="python"
            build_path=$(dirname "$(find . -name "pyproject.toml" -o -name "setup.py" | head -n1)")
          elif find . -name "go.mod" | grep -q .; then
            lang="go"
            build_path=$(dirname "$(find . -name "go.mod" | head -n1)")
          elif find . -name "*.sln" | grep -q . || find . -name "*.csproj" | grep -q .; then
            lang="dotnet_framework"
            build_path=$(dirname "$(find . -name "*.sln" -o -name "*.csproj" | head -n1)")
          elif find . -name "Makefile" | grep -q . || find . -name "CMakeLists.txt" | grep -q .; then
            lang="cpp"
            build_path="."
          elif find . -name "build.xml" | grep -q .; then
            lang="ant"
            build_path=$(dirname "$(find . -name "build.xml" | head -n1)")
          elif find . -name "composer.json" | grep -q .; then
            lang="php"
            build_path=$(dirname "$(find . -name "composer.json" | head -n1)")
          elif find . -name "Gemfile" | grep -q .; then
            lang="ruby"
            build_path=$(dirname "$(find . -name "Gemfile" | head -n1)")
          elif find . -name "Podfile" | grep -q . || [ -d "ios" ]; then
            lang="ios"
            build_path="ios"
          else
            lang="fallback"
            build_path="."
          fi

          echo "‚úÖ Detected: $lang"
          echo "üìÇ Build Path: $build_path"

          echo "language=$lang" >> $GITHUB_OUTPUT
          echo "build_path=$build_path" >> $GITHUB_OUTPUT

  # -----------------------------
  # üîπ Build com Auto-Packager
  # -----------------------------
  build_auto:
    name: Build with Veracode Auto-Packager
    runs-on: ubuntu-latest
    needs: detect_stack
    if: |
      needs.detect_stack.outputs.language == 'maven' ||
      needs.detect_stack.outputs.language == 'gradle' ||
      needs.detect_stack.outputs.language == 'kotlin' ||
      needs.detect_stack.outputs.language == 'android' ||
      needs.detect_stack.outputs.language == 'node' ||
      needs.detect_stack.outputs.language == 'python' ||
      needs.detect_stack.outputs.language == 'go'
    steps:
      - name: Checkout
        uses: actions/checkout@v4.1.2

      - name: Run Veracode Auto-Packager
        run: |
          curl -sS https://downloads.veracode.com/securityscan/veracode-packager-LATEST.zip -o packager.zip
          unzip packager.zip
          chmod +x veracode-packager
          ./veracode-packager --source . --output veracode_out

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: veracode-package
          path: veracode_out/*.zip

  # -----------------------------
  # üîπ Build Manual (Fallback)
  # -----------------------------
  build_manual:
    name: Build Manual (Fallback)
    runs-on: ubuntu-latest
    needs: detect_stack
    if: |
      needs.detect_stack.outputs.language == 'cpp' ||
      needs.detect_stack.outputs.language == 'ant' ||
      needs.detect_stack.outputs.language == 'ios' ||
      needs.detect_stack.outputs.language == 'php' ||
      needs.detect_stack.outputs.language == 'ruby'
    defaults:
      run:
        working-directory: ${{ needs.detect_stack.outputs.build_path }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4.1.2

      - id: build
        name: Manual Build
        run: |
          mkdir -p output
          lang="${{ needs.detect_stack.outputs.language }}"

          echo "‚û°Ô∏è Manual Building: $lang"

          if [ "$lang" = "cpp" ]; then
            make || cmake . && make && cp -r ./ output/
          elif [ "$lang" = "ant" ]; then
            ant debug || ant release || ant build && cp -r build/* output/
          elif [ "$lang" = "php" ]; then
            composer install || true && rsync -av ./ ./output --exclude output --exclude vendor --exclude .git
          elif [ "$lang" = "ruby" ]; then
            bundle install || true && rsync -av ./ ./output --exclude output --exclude .git
          elif [ "$lang" = "ios" ]; then
            rsync -av ./ ./output --exclude output --exclude .git
          else
            rsync -av ./ ./output --exclude output --exclude .git
          fi

      - name: Package Manual Output
        run: zip -r veracode.zip output

      - name: Upload Manual Artifact
        uses: actions/upload-artifact@v4
        with:
          name: veracode-package
          path: veracode.zip

  # -----------------------------
  # üîπ Veracode Pipeline Scan
  # -----------------------------
  pipeline_scan:
    name: Veracode Pipeline Scan
    runs-on: ubuntu-latest
    needs: [build_auto, build_manual]
    if: always()
    continue-on-error: true
    steps:
      - name: Download Artifact
        uses: actions/download-artifact@v4
        with:
          name: veracode-package

      - name: Run Veracode Pipeline Scan (Action Oficial)
        uses: veracode/Veracode-pipeline-scan-action@v1.2.0
        with:
          vid: ${{ secrets.VID }}
          vkey: ${{ secrets.VKEY }}
          filepath: '**/*.zip'
          fail_build: true
          issue_details: true

  # -----------------------------
  # üîπ Veracode Upload & Scan
  # -----------------------------
  sast:
    name: Veracode Upload & Scan
    runs-on: ubuntu-latest
    needs: [build_auto, build_manual]
    if: always()
    steps:
      - name: Download Artifact
        uses: actions/download-artifact@v4
        with:
          name: veracode-package

      - name: Veracode Upload & Scan
        uses: veracode/veracode-uploadandscan-action@v1.0.9
        with:
          vid: ${{ secrets.VID }}
          vkey: ${{ secrets.VKEY }}
          appname: 'Github - ${{ github.repository }}'
          createprofile: true
          filepath: '**/*.zip'
          version: ${{ github.run_id }}
